head(col0)
col0 = logcpm[, d$samples$group=="Col-0"]
head(col0)
rev5 = logcpm[, d$samples$group=="rev5"]
wox4 = logcpm[, d$samples$group=="wox4"]
 = logcpm[, d$samples$group=="fio1"]
mutant = logcpm[, d$samples$group!="Col-0" && d$samples$group!="wox4" && d$samples$group!="FPA8" && d$samples$group!="VIRc"]
mutant = logcpm[, (d$samples$group!="Col-0" && d$samples$group!="wox4" && d$samples$group!="FPA8" && d$samples$group!="VIRc")]
mutant = logcpm[, (d$samples$group!="Col-0" & d$samples$group!="wox4" & d$samples$group!="FPA8" & d$samples$group!="VIRc")]
head(mutant)
mutant2 = logcpm[, (d$samples$group=="wox4" | d$samples$group=="FPA8" | d$samples$group=="VIRc")]
head(mutant2)
plotMDS(Col-0, col=c(rep("red",2), rep("darkorange",3), rep("gold",6), rep("green", 6), rep("seagreen", 24), rep("cyan",3), rep("blue", 2), rep("purple", 4)), pch=1)
plotMDS(logcpm, col=c(rep("red",6), rep("darkorange",6), rep("gold",18), rep("green", 18), rep("seagreen", 48), rep("cyan",6), rep("blue", 4), rep("purple", 8)), pch=19)
plotMDS(col0, col=c(rep("red",2), rep("darkorange",3), rep("gold",6), rep("green", 6), rep("seagreen", 24), rep("cyan",3), rep("blue", 2), rep("purple", 4)), pch=1)
plotMDS(mutant, col=c(rep("red",2), rep("darkorange",3), rep("gold",6), rep("green", 6), rep("seagreen", 24), rep("cyan",3), rep("blue", 2), rep("purple", 4)), pch=16)
plotMDS(mutant2, col=c(rep("red",2), rep("gold",6), rep("green", 6)), pch=15)
plotMDS(mutant2, col=c(rep("red",2), rep("gold",6), rep("green", 6)), pch=15)
plotMDS(mutant, col=c(rep("red",2), rep("darkorange",3), rep("gold",6), rep("green", 6), rep("seagreen", 24), rep("cyan",3), rep("blue", 2), rep("purple", 4)), pch=16)
plotMDS(mutant2, col=c(rep("red",2), rep("gold",6), rep("green", 6)), pch=15)
plotMDS(col0, col=c(rep("red",2), rep("darkorange",3), rep("gold",6), rep("green", 6), rep("seagreen", 24), rep("cyan",3), rep("blue", 2), rep("purple", 4)), pch=1)
plotMDS(col0, col=c(rep("red",2), rep("darkorange",3), rep("gold",6), rep("green", 6), rep("seagreen", 24), rep("cyan",3), rep("blue", 2), rep("purple", 4)), pch=1)
plotMDS(mutant, col=c(rep("red",2), rep("darkorange",3), rep("gold",6), rep("green", 6), rep("seagreen", 24), rep("cyan",3), rep("blue", 2), rep("purple", 4)), pch=16, add=T)
color <- c("red", "darkorange", "gold", "green", "darkgreen", "cyan", "blue", "purple")[group]
color
group
color <- c("red", "darkorange", "gold", "green", "darkgreen", "cyan", "blue", "purple")[treat]
treat
treat = factor(c("Botterweg", "Botterweg", "Botterweg", "Botterweg", "Botterweg", "Botterweg", "Cai", "Cai", "Cai", "Cai", "Cai", "Cai", "ParkerFpa", "ParkerFpa", "ParkerFpa", "ParkerFpa", "ParkerFpa", "ParkerFpa", "ParkerFpa", "ParkerFpa", "ParkerFpa", "ParkerFpa", "ParkerFpa", "ParkerFpa", "ParkerFpa", "ParkerFpa", "ParkerFpa", "ParkerFpa", "ParkerFpa", "ParkerFpa", "ParkerVir", "ParkerVir", "ParkerVir", "ParkerVir", "ParkerVir", "ParkerVir", "ParkerVir", "ParkerVir", "ParkerVir", "ParkerVir", "ParkerVir", "ParkerVir", "ParkerVir", "ParkerVir", "ParkerVir", "ParkerVir", "ParkerVir", "ParkerVir", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Sun", "Sun", "Sun", "Sun", "Sun", "Sun", "Wang", "Wang", "Wang", "Wang", "Wei", "Wei", "Wei", "Wei", "Wei", "Wei", "Wei", "Wei"))t
treat
color <- c("red", "darkorange", "gold", "green", "darkgreen", "cyan", "blue", "purple")[treat]
color
color <- c("red", "orange", "yellow", "green", "darkgreen", "cyan", "blue", "purple")[treat]
color
color <- c("red", "orange", "gold", "green", "darkgreen", "cyan", "blue", "purple")[treat]
marker <- c(1, 2, 3, 4, 5, 6, 15, 16, 17)[group]
marker
plotMDS(logcpm, col=color, pch=marker)
color <- c("red", "orange", "gold", "green", "seagreen", "cyan", "blue", "purple")[treat]
plotMDS(logcpm, col=color, pch=marker)
legend("topmiddle",fill=c("red", "orange", "gold", "green", "seagreen", "cyan", "blue", "purple"), legend=levels(treat))
legend("top",fill=c("red", "orange", "gold", "green", "seagreen", "cyan", "blue", "purple"), legend=levels(treat))
legend("topright",pch = c(1, 2, 3, 4, 5, 6, 15, 16, 17),legend=levels(group))
marker <- c(1, 2, 3, 4, 5, 6, 15, 19, 17)[group]
plotMDS(logcpm, col=color, pch=marker)
legend("topright",pch = c(1, 2, 3, 4, 5, 6, 15, 16, 17),legend=levels(group))
legend("top",fill=c("red", "orange", "gold", "green", "seagreen", "cyan", "blue", "purple"), legend=levels(treat))
legend("topright",pch = c(1, 2, 3, 4, 5, 6, 15, 19, 17),legend=levels(group))
pdf("../MDS_geneexp.pdf")
plotMDS(logcpm, col=color, pch=marker)
legend("topright",pch = c(1, 2, 3, 4, 5, 6, 15, 19, 17),legend=levels(group))
legend("top",fill=c("red", "orange", "gold", "green", "seagreen", "cyan", "blue", "purple"), legend=levels(treat))
dev.off()
plotMDS(logcpm, col=color, pch=marker)
legend("topright",pch = c(1, 2, 3, 4, 5, 6, 15, 19, 17),legend=levels(group), bty="n")
legend("top",fill=c("red", "orange", "gold", "green", "seagreen", "cyan", "blue", "purple"), legend=levels(treat), bty="n")
pdf("../MDS_geneexp.pdf")
plotMDS(logcpm, col=color, pch=marker)
legend("top",fill=c("red", "orange", "gold", "green", "seagreen", "cyan", "blue", "purple"), legend=levels(treat), bty="n")
legend("topright",pch = c(1, 2, 3, 4, 5, 6, 15, 19, 17),legend=levels(group), bty="n")
dev.off()
q()
source("/home/miyokawa/ドキュメント/ngs/software/Subread_to_DEXSeq/load_SubreadOutput.R")
suppressPackageStartupMessages({
  require(dplyr)
})
library(DEXSeq)
source("/home/miyokawa/ドキュメント/ngs/software/Subread_to_DEXSeq/load_SubreadOutput.R")
suppressPackageStartupMessages({
  require(dplyr)
})
samp <- data.frame(row.names = c("Cai_Col-0_1.bam","Cai_Col-0_2.bam","Cai_Col-0_3.bam", "Cai_fio1_1.bam", "Cai_fio1_2.bam", "Cai_fio1_3.bam"), 
                   condition = c("Col-0", "Col-0", "Col-0", "fio1", "fio1", "fio1"))
dxd.fc <- DEXSeqDataSetFromFeatureCounts("/media/miyokawa/8TB-Data3/tech_data/count/dex_counts_Cai.txt",
                                         flattenedfile = "Araport11_GTF_genes_transposons.Apr2023_flat.gtf",
                                         sampleData = samp)
samp <- data.frame(row.names = c("Cai_Col-0_1.bam","Cai_Col-0_2.bam","Cai_Col-0_3.bam", "Cai_fio1_1.bam", "Cai_fio1_2.bam", "Cai_fio1_3.bam"), 
                   condition = c("Col_0", "Col_0", "Col_0", "fio1", "fio1", "fio1"))
dxd.fc <- DEXSeqDataSetFromFeatureCounts("/media/miyokawa/8TB-Data3/tech_data/count/dex_counts_Cai.txt",
                                         flattenedfile = "Araport11_GTF_genes_transposons.Apr2023_flat.gtf",
                                         sampleData = samp)
dxd.fc <- DEXSeqDataSetFromFeatureCounts("/media/miyokawa/8TB-Data3/tech_data/count/dex_counts_Cai.txt",
                                         flattenedfile = "Araport11_GTF_genes_transposons.Apr2023_flat.gtf",
                                         sampleData = samp)
dxd.fc
dxd.fc <- DEXSeqDataSetFromFeatureCounts("/media/miyokawa/8TB-Data3/tech_data/count/dex_counts_Cai.txt",
                                         flattenedfile = "Araport11_GTF_genes_transposons.Apr2023_flat.gff",
                                         sampleData = samp)
dxd.fc <- DEXSeqDataSetFromFeatureCounts("/media/miyokawa/8TB-Data3/tech_data/count/dex_counts_Cai.txt",
                                         flattenedfile = "Araport11_GTF_genes_transposons.Apr2023_flat.gtf",
                                         sampleData = samp)
dxd <- estimateSizeFactors(dxd.fc)
dxd <- estimateDispersions(dxd)
plotDispEsts(dxd)
dxd <- testForDEU(dxd)
dxd <- estimateExonFoldChanges(dxd, fitExpToVar="condition")
dxd <- estimateExonFoldChanges(dxd, fitExpToVar="condition")
dxr1 <- DEXSeqResults(dxd)
write.table(dxr1, quote = F, sep = "\t", file = "DEXSeq_Cai_result.txt")
dxr1
dxr_table <- as.factor(dxr1)
write.table(dxr1, quote = F, sep = "\t", file = "DEXSeq_Cai_result.txt")
write.table(dxr1, quote = F, sep = "\t", file = "DEXSeq_Cai_result.txt", , row.names = FALSE)
table <- as.data.frame(dxr1)
table
head(table)
write.table(table, quote = F, sep = "\t", file = "DEXSeq_Cai_result.txt")
table$transcripts = as.character(table$transcript)
head(table)
write.table(table, quote = F, sep = "\t", file = "DEXSeq_Cai_result.txt")
browseVignettes("DEXSeq")
samp <- data.frame(row.names = c("Botterweg_Col-0_1.bam","Botterweg_Col-0_2.bam","Botterweg_Col-0_3.bam", "Botterweg_fio1_1.bam", "Botterweg_fio1_2.bam", "Botterweg_fio1_3.bam"), 
                   condition = c("Col_0", "Col_0", "rev5", "rev5", "wox4", "wox4"))
dxd.fc <- DEXSeqDataSetFromFeatureCounts("/media/miyokawa/8TB-Data3/tech_data/count/dex_counts_Botterweg.txt",
                                         flattenedfile = "Araport11_GTF_genes_transposons.Apr2023_flat.gtf",
                                         sampleData = samp)
head(dxd.fc)
dxd <- estimateSizeFactors(dxd.fc)
dxd <- estimateDispersions(dxd)
plotDispEsts(dxd)
dxd.fc
dxd.fc$sample
dxd <- testForDEU(dxd)
# Estimate relative exon usage fold changes
dxd <- estimateExonFoldChanges(dxd, fitExpToVar="condition")
dxr1 <- DEXSeqResults(dxd)
table <- as.data.frame(dxr1)
table$transcript <- as.character(table$transcript)
write.table(table, quote = F, sep = "\t", file = "DEXSeq_Botterweg_result.txt", index=F)
dxr1 <- DEXSeqResults(dxd)
table <- as.data.frame(dxr1)
table$transcript <- as.character(table$transcript)
write.table(table, quote = F, sep = "\t", file = "DEXSeq_Botterweg_result.txt", row.names=F)
dxr1 <- DEXSeqResults(dxd)
head(dexr1)
head(dxr1)
table <- as.data.frame(dxr1)
table$transcript <- as.character(table$transcript)
head(table)
table <- as.data.frame(dxr1)
table$transcripts <- as.character(table$transcripts)
head(table)
write.table(table, quote = F, sep = "\t", file = "DEXSeq_Botterweg_result.txt", row_names=F)
write.table(table, quote = F, sep = "\t", file = "DEXSeq_Botterweg_result.txt", row.names=F)
q()
source("/home/miyokawa/ドキュメント/ngs/software/Subread_to_DEXSeq/load_SubreadOutput.R")
suppressPackageStartupMessages({
  require(dplyr)
})
samp <- data.frame(row.names = c("Sun_Col-0_1.bam","Sun_Col-0_2.bam","Sun_fio1-1_1.bam", "Sun_fio1-1_2.bam", "Sun_fio1-5_1.bam", "Sun_fio1-5_2.bam"), 
                   condition = c("Col_0", "Col_0", "fio1-1", "fio1-1", "fio1-5", "fio1-5"))
dxd.fc <- DEXSeqDataSetFromFeatureCounts("/media/miyokawa/8TB-Data3/tech_data/count/dex_counts_Sun.txt",
                                         flattenedfile = "Araport11_GTF_genes_transposons.Apr2023_flat.gtf",
                                         sampleData = samp)
dxd <- estimateSizeFactors(dxd.fc)
dxd <- estimateDispersions(dxd)
plotDispEsts(dxd)
dxd <- testForDEU(dxd)
browseVigenette("DEXSeq")
browseVignettes("DEXSeq")
dxd <- estimateExonFoldChanges(dxd, fitExpToVar="condition")
# Output DEXSeq result
dxr1 <- DEXSeqResults(dxd)
table <- as.data.frame(dxr1)
table$transcripts <- as.character(table$transcripts)
write.table(table, quote = F, sep = "\t", file = "DEXSeq_Sun_result.txt", row.names=F)
samp <- data.frame(row.names = c("Wang_Col-0_1.bam","Wang_Col-0_2.bam","Wang_fio1_1.bam", "Wang_fio1_2.bam"), 
                   condition = c("Col_0", "Col_0", "fio1", "fio1"))
dxd.fc <- DEXSeqDataSetFromFeatureCounts("/media/miyokawa/8TB-Data3/tech_data/count/dex_counts_Wang.txt",
                                         flattenedfile = "Araport11_GTF_genes_transposons.Apr2023_flat.gtf",
                                         sampleData = samp)
dxd <- estimateSizeFactors(dxd.fc)
# Estimate variance or dispersion parameters individually exon by exon
dxd <- estimateDispersions(dxd)
plotDispEsts(dxd)
dxd <- testForDEU(dxd)
# Estimate relative exon usage fold changes
dxd <- estimateExonFoldChanges(dxd, fitExpToVar="condition")
dxr1 <- DEXSeqResults(dxd)
table <- as.data.frame(dxr1)
table$transcripts <- as.character(table$transcripts)
write.table(table, quote = F, sep = "\t", file = "DEXSeq_Wang_result.txt", row.names=F)
q()n
q()
source("/home/miyokawa/ドキュメント/ngs/software/Subread_to_DEXSeq/load_SubreadOutput.R")
suppressPackageStartupMessages({
  require(dplyr)
})
library(BiocParallel)
samp <- data.frame(row.names = c("Parker_Col-0_04c_1", "Parker_Col-0_04c_2", "Parker_Col-0_04c_3", "Parker_Col-0_04c_4", "Parker_Col-0_04c_5", "Parker_Col-0_04c_6", "Parker_Col-0_12c_1", "Parker_Col-0_12c_2", "Parker_Col-0_12c_3", "Parker_Col-0_12c_4", "Parker_Col-0_12c_5", "Parker_Col-0_12c_6", "Parker_Col-0_20c_1", "Parker_Col-0_20c_2", "Parker_Col-0_20c_3", "Parker_Col-0_20c_4", "Parker_Col-0_20c_5", "Parker_Col-0_20c_6", "Parker_Col-0_28c_1", "Parker_Col-0_28c_2", "Parker_Col-0_28c_3", "Parker_Col-0_28c_4", "Parker_Col-0_28c_5", "Parker_Col-0_28c_6", "Parker_fio1_04c_1", "Parker_fio1_04c_2", "Parker_fio1_04c_3", "Parker_fio1_04c_4", "Parker_fio1_04c_5", "Parker_fio1_04c_6", "Parker_fio1_12c_1", "Parker_fio1_12c_2", "Parker_fio1_12c_3", "Parker_fio1_12c_4", "Parker_fio1_12c_5", "Parker_fio1_12c_6", "Parker_fio1_20c_1", "Parker_fio1_20c_2", "Parker_fio1_20c_3", "Parker_fio1_20c_4", "Parker_fio1_20c_5", "Parker_fio1_20c_6", "Parker_fio1_28c_1", "Parker_fio1_28c_2", "Parker_fio1_28c_3", "Parker_fio1_28c_4", "Parker_fio1_28c_5", "Parker_fio1_28c_6"), 
                   condition = c("Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "fio1", "fio1", "fio1", "fio1", "fio1", "fio1", "fio1", "fio1", "fio1", "fio1", "fio1", "fio1", "fio1", "fio1", "fio1", "fio1", "fio1", "fio1", "fio1", "fio1", "fio1", "fio1", "fio1", "fio1"), 
                   type = "04c", "04c", "04c", "04c", "04c", "04c", "12c", "12c", "12c", "12c", "12c", "12c", "20c", "20c", "20c", "20c", "20c", "20c", "28c", "28c", "28c", "28c", "28c", "28c", "04c", "04c", "04c", "04c", "04c", "04c", "12c", "12c", "12c", "12c", "12c", "12c", "20c", "20c", "20c", "20c", "20c", "20c", "28c", "28c", "28c", "28c", "28c", "28c"))
samp <- data.frame(row.names = c("Parker_Col-0_04c_1", "Parker_Col-0_04c_2", "Parker_Col-0_04c_3", "Parker_Col-0_04c_4", "Parker_Col-0_04c_5", "Parker_Col-0_04c_6", "Parker_Col-0_12c_1", "Parker_Col-0_12c_2", "Parker_Col-0_12c_3", "Parker_Col-0_12c_4", "Parker_Col-0_12c_5", "Parker_Col-0_12c_6", "Parker_Col-0_20c_1", "Parker_Col-0_20c_2", "Parker_Col-0_20c_3", "Parker_Col-0_20c_4", "Parker_Col-0_20c_5", "Parker_Col-0_20c_6", "Parker_Col-0_28c_1", "Parker_Col-0_28c_2", "Parker_Col-0_28c_3", "Parker_Col-0_28c_4", "Parker_Col-0_28c_5", "Parker_Col-0_28c_6", "Parker_fio1_04c_1", "Parker_fio1_04c_2", "Parker_fio1_04c_3", "Parker_fio1_04c_4", "Parker_fio1_04c_5", "Parker_fio1_04c_6", "Parker_fio1_12c_1", "Parker_fio1_12c_2", "Parker_fio1_12c_3", "Parker_fio1_12c_4", "Parker_fio1_12c_5", "Parker_fio1_12c_6", "Parker_fio1_20c_1", "Parker_fio1_20c_2", "Parker_fio1_20c_3", "Parker_fio1_20c_4", "Parker_fio1_20c_5", "Parker_fio1_20c_6", "Parker_fio1_28c_1", "Parker_fio1_28c_2", "Parker_fio1_28c_3", "Parker_fio1_28c_4", "Parker_fio1_28c_5", "Parker_fio1_28c_6"), 
                   condition = c("Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "fio1", "fio1", "fio1", "fio1", "fio1", "fio1", "fio1", "fio1", "fio1", "fio1", "fio1", "fio1", "fio1", "fio1", "fio1", "fio1", "fio1", "fio1", "fio1", "fio1", "fio1", "fio1", "fio1", "fio1"), 
                   type = c("04c", "04c", "04c", "04c", "04c", "04c", "12c", "12c", "12c", "12c", "12c", "12c", "20c", "20c", "20c", "20c", "20c", "20c", "28c", "28c", "28c", "28c", "28c", "28c", "04c", "04c", "04c", "04c", "04c", "04c", "12c", "12c", "12c", "12c", "12c", "12c", "20c", "20c", "20c", "20c", "20c", "20c", "28c", "28c", "28c", "28c", "28c", "28c"))
dxd.fc <- DEXSeqDataSetFromFeatureCounts("/media/miyokawa/8TB-Data3/tech_data/count/dex_counts_Parker.txt",
                                         flattenedfile = "Araport11_GTF_genes_transposons.Apr2023_flat.gtf",
                                         sampleData = samp)
dxd <- estimateSizeFactors(dxd.fc)
formuladispersion <- count ~ sample + (exon + type) * condition
dxd <- estimateDispersions(dxd, formula = formuladispersion)
formuladispersion <- ~ sample + (exon + type) * condition
dxd <- estimateDispersions(dxd, formula = formuladispersion)
dxd
BPPARAM = MultiCoreParam(8)
library(BiocParallel)
browseVignettes("BiocParallel")
library(BiocParallel)
BPPARAM = MultiCoreParam(8)
multicoreParam <- MulticoreParam(workers = 8)
dxd = estimateDispersions( dxd, formula = formuladispersion, BPPARAM=multicoreParam)
plotDispEsts(dxd)
formula0 <- ~ sample + type * exon + condition
formula1 <- ~ sample + type * exon + condition * I(exon == exonID)
dxd <- testForDEU(dxd, formula0 = formula0, formula1 = formula1, BPPARAM=multicoreParam)
formulaFullModel    =  ~ sample + exon + type:exon + condition:exon
formulaReducedModel =  ~ sample + exon + type:exon 
multicoreParam <- MulticoreParam(workers = 8)
dxd = estimateDispersions( dxd, formula = formulaFullModel, BPPARAM=multicoreParam)
plotDispEsts(dxd)
dxd = testForDEU( dxd, reducedModel = formulaReducedModel, fullModel = formulaFullModel, BPPARAM=multicoreParam)
dxd <- estimateExonFoldChanges(dxd, fitExpToVar="condition", BPPARAM=multicoreParam)
dxr1 <- DEXSeqResults(dxd)
table <- as.data.frame(dxr1)
table$transcripts <- as.character(table$transcripts)
write.table(table, quote = F, sep = "\t", file = "DEXSeq_Parker_result.txt", row.names=F)
q()
source("/home/miyokawa/ドキュメント/ngs/software/Subread_to_DEXSeq/load_SubreadOutput.R")
suppressPackageStartupMessages({
  require(dplyr)
})
library(BiocParallel)
rn <- c("Botterweg_Col-0_1.bam", "Botterweg_Col-0_2.bam", "Botterweg_rev5_1.bam", "Botterweg_rev5_2.bam", "Botterweg_wox4_1.bam", "Botterweg_wox4_2.bam", "Cai_Col-0_1.bam", "Cai_Col-0_2.bam", "Cai_Col-0_3.bam", "Cai_fio1_1.bam", "Cai_fio1_2.bam", "Cai_fio1_3.bam", "ParkerFpa_35SFPA8_1.bam", "ParkerFpa_35SFPA8_2.bam", "ParkerFpa_35SFPA8_3.bam", "ParkerFpa_35SFPA8_4.bam", "ParkerFpa_35SFPA8_5.bam", "ParkerFpa_35SFPA8_6.bam", "ParkerFpa_Col-0_1.bam", "ParkerFpa_Col-0_2.bam", "ParkerFpa_Col-0_3.bam", "ParkerFpa_Col-0_4.bam", "ParkerFpa_Col-0_5.bam", "ParkerFpa_Col-0_6.bam", "ParkerFpa_fpa8_1.bam", "ParkerFpa_fpa8_2.bam", "ParkerFpa_fpa8_3.bam", "ParkerFpa_fpa8_4.bam", "ParkerFpa_fpa8_5.bam", "ParkerFpa_fpa8_6.bam", "ParkerVir_Col-0_1.bam", "ParkerVir_Col-0_2.bam", "ParkerVir_Col-0_3.bam", "ParkerVir_Col-0_4.bam", "ParkerVir_Col-0_5.bam", "ParkerVir_Col-0_6.bam", "ParkerVir_VIRc_1.bam", "ParkerVir_VIRc_2.bam", "ParkerVir_VIRc_3.bam", "ParkerVir_VIRc_4.bam", "ParkerVir_VIRc_5.bam", "ParkerVir_VIRc_6.bam", "ParkerVir_vir1_1.bam", "ParkerVir_vir1_2.bam", "ParkerVir_vir1_3.bam", "ParkerVir_vir1_4.bam", "ParkerVir_vir1_5.bam", "ParkerVir_vir1_6.bam", "Parker_Col-0_04c_1.bam", "Parker_Col-0_04c_2.bam", "Parker_Col-0_04c_3.bam", "Parker_Col-0_04c_4.bam", "Parker_Col-0_04c_5.bam", "Parker_Col-0_04c_6.bam", "Parker_Col-0_12c_1.bam", "Parker_Col-0_12c_2.bam", "Parker_Col-0_12c_3.bam", "Parker_Col-0_12c_4.bam", "Parker_Col-0_12c_5.bam", "Parker_Col-0_12c_6.bam", "Parker_Col-0_20c_1.bam", "Parker_Col-0_20c_2.bam", "Parker_Col-0_20c_3.bam", "Parker_Col-0_20c_4.bam", "Parker_Col-0_20c_5.bam", "Parker_Col-0_20c_6.bam", "Parker_Col-0_28c_1.bam", "Parker_Col-0_28c_2.bam", "Parker_Col-0_28c_3.bam", "Parker_Col-0_28c_4.bam", "Parker_Col-0_28c_5.bam", "Parker_Col-0_28c_6.bam", "Parker_fio1_04c_1.bam", "Parker_fio1_04c_2.bam", "Parker_fio1_04c_3.bam", "Parker_fio1_04c_4.bam", "Parker_fio1_04c_5.bam", "Parker_fio1_04c_6.bam", "Parker_fio1_12c_1.bam", "Parker_fio1_12c_2.bam", "Parker_fio1_12c_3.bam", "Parker_fio1_12c_4.bam", "Parker_fio1_12c_5.bam", "Parker_fio1_12c_6.bam", "Parker_fio1_20c_1.bam", "Parker_fio1_20c_2.bam", "Parker_fio1_20c_3.bam", "Parker_fio1_20c_4.bam", "Parker_fio1_20c_5.bam", "Parker_fio1_20c_6.bam", "Parker_fio1_28c_1.bam", "Parker_fio1_28c_2.bam", "Parker_fio1_28c_3.bam", "Parker_fio1_28c_4.bam", "Parker_fio1_28c_5.bam", "Parker_fio1_28c_6.bam", "Sun_Col-0_1.bam", "Sun_Col-0_2.bam", "Sun_fio1-1_1.bam", "Sun_fio1-1_2.bam", "Sun_fio1-5_1.bam", "Sun_fio1-5_2.bam", "Wang_Col-0_1.bam", "Wang_Col-0_2.bam", "Wang_fio1_1.bam", "Wang_fio1_2.bam", "Wei_Col-0_1.bam", "Wei_Col-0_2.bam", "Wei_Col-0_3.bam", "Wei_Col-0_4.bam", "Wei_ect2_1.bam", "Wei_ect2_2.bam", "Wei_ect2_3.bam", "Wei_ect2_4.bam")
condition <- factor(c("Col-0", "Col-0", "rev5", "rev5", "wox4", "wox4", "Col-0", "Col-0", "Col-0", "fio1", "fio1", "fio1", "FPA8", "FPA8", "FPA8", "FPA8", "FPA8", "FPA8", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "fpa8", "fpa8", "fpa8", "fpa8", "fpa8", "fpa8", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "VIRc", "VIRc", "VIRc", "VIRc", "VIRc", "VIRc", "vir", "vir", "vir", "vir", "vir", "vir", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "Col-0", "fio1", "fio1", "fio1", "fio1", "fio1", "fio1", "fio1", "fio1", "fio1", "fio1", "fio1", "fio1", "fio1", "fio1", "fio1", "fio1", "fio1", "fio1", "fio1", "fio1", "fio1", "fio1", "fio1", "fio1", "Col-0", "Col-0", "fio1", "fio1", "fio1", "fio1", "Col-0", "Col-0", "fio1", "fio1", "Col-0", "Col-0", "Col-0", "Col-0", "ect2", "ect2", "ect2", "ect2"))
type <- factor(c("Botterweg", "Botterweg", "Botterweg", "Botterweg", "Botterweg", "Botterweg", "Cai", "Cai", "Cai", "Cai", "Cai", "Cai", "ParkerFpa", "ParkerFpa", "ParkerFpa", "ParkerFpa", "ParkerFpa", "ParkerFpa", "ParkerFpa", "ParkerFpa", "ParkerFpa", "ParkerFpa", "ParkerFpa", "ParkerFpa", "ParkerFpa", "ParkerFpa", "ParkerFpa", "ParkerFpa", "ParkerFpa", "ParkerFpa", "ParkerVir", "ParkerVir", "ParkerVir", "ParkerVir", "ParkerVir", "ParkerVir", "ParkerVir", "ParkerVir", "ParkerVir", "ParkerVir", "ParkerVir", "ParkerVir", "ParkerVir", "ParkerVir", "ParkerVir", "ParkerVir", "ParkerVir", "ParkerVir", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Parker", "Sun", "Sun", "Sun", "Sun", "Sun", "Sun", "Wang", "Wang", "Wang", "Wang", "Wei", "Wei", "Wei", "Wei", "Wei", "Wei", "Wei", "Wei"))
samp <- data.frame(row.names=rn, condition, type)
dxd.fc <- DEXSeqDataSetFromFeatureCounts("/media/miyokawa/8TB-Data3/tech_data/count/dex_counts_all.txt",
                                         flattenedfile = "Araport11_GTF_genes_transposons.Apr2023_flat.gtf",
                                         sampleData = samp, design= ~ sample + exon + condition:exon)
formulaFullModel    =  ~ sample + exon + type:exon + condition:exon
formulaReducedModel =  ~ sample + exon + type:exon 
multicoreParam <- MulticoreParam(workers = 8)
dxd = estimateDispersions( dxd, formula = formulaFullModel, BPPARAM=multicoreParam)
dxd <- estimateSizeFactors(dxd.fc)
dxd = estimateDispersions( dxd, formula = formulaFullModel, BPPARAM=multicoreParam)
# Test for differential exon usage in each gene
dxd = testForDEU( dxd, reducedModel = formulaReducedModel, fullModel = formulaFullModel, BPPARAM=multicoreParam)
# Estimate relative exon usage fold changes
dxd <- estimateExonFoldChanges(dxd, fitExpToVar="condition", BPPARAM=multicoreParam)
dxr1 <- DEXSeqResults(dxd)
table <- as.data.frame(dxr1)
table$transcripts <- as.character(table$transcripts)
write.table(table, quote = F, sep = "\t", file = "DEXSeq_Parker_all.txt", row.names=F)
rn
plotDEXSeq(dxd, "AT1G01020", cex.axis = 1.2, cex = 1.3, lwd = 2, legend = TRUE)
plotDEXSeq(dxr1, "AT1G01020", cex.axis = 1.2, cex = 1.3, lwd = 2, legend = TRUE)
ex <- read.table("../DEXSeq/exon_usage_all.csv", header=T, sep="\t")
head(ex)
color <- c("red", "orange", "gold", "green", "seagreen", "cyan", "blue", "purple")
plotMDS(logcpm, col=color, pch=16)
library(edgeR)
plotMDS(logcpm, col=color, pch=16)
plotMDS(ex, col=color, pch=16)
legend()
colnames(ex)
legend("topleft",pch = 16,legend=levels(coknames(ex)))
legend("topleft",pch = 16,legend=levels(colnames(ex)))
legend("topleft",pch = 16,legend=colnames(ex))
legend("topleft",pch = 16, col=color, legend=colnames(ex))
legend("topleft",pch = 19, col=color, legend=colnames(ex))
plotMDS(ex, col=color, pch=19)
legend("topleft",pch = 19, col=color, legend=colnames(ex))
pdf("exon_usage_all.pdf")
plotMDS(ex, col=color, pch=19)
legend("topleft",pch = 19, col=color, legend=colnames(ex))
dev.off()
dxd2 = testForDEU( dxd, BPPARAM=multicoreParam)
dxd2
dxd
dxr2 <- DEXSeqResults(dxd2)
table2 <- as.data.frame(dxr2)
table2$transcripts <- as.character(table2$transcripts)
write.table(table2, quote = F, sep = "\t", file = "DEXSeq_all_batched.txt", row.names=F)
dxd2 <- estimateExonFoldChanges(dxd2, fitExpToVar="condition", BPPARAM=multicoreParam)
dxr2 <- DEXSeqResults(dxd2)
table2 <- as.data.frame(dxr2)
table2$transcripts <- as.character(table2$transcripts)
write.table(table2, quote = F, sep = "\t", file = "DEXSeq_all_batched.txt", row.names=F)
color <- c("red", "darkorange", "gold", "green", "seagreen", "cyan", "blue", "purple", "magenta")
plotMDS(ex, col=color, pch=19)
legend("topleft", pch = 19, col=color, legend=colnames(ex))
pdf("exon_usage_all.pdf")
plotMDS(ex, col=color, pch=19)
legend("topleft", pch = 19, col=color, legend=colnames(ex))
dev.off()
ex2 = select(ex, -"ect2")
head(ex2)
plotMDS(ex2, col=color, pch=19)
color2 <- c("red", "gold", "green", "seagreen", "cyan", "blue", "purple", "magenta")
plotMDS(ex2, col=color2, pch=19)
legend("topleft", pch = 19, col=color2, legend=colnames(ex2))
legend("top", pch = 19, col=color2, legend=colnames(ex2))
plotMDS(ex2, col=color2, pch=19)
legend("top", pch = 19, col=color2, legend=colnames(ex2))
pdf("exon_usage_noect2.pdf")
plotMDS(ex2, col=color2, pch=19)
legend("top", pch = 19, col=color2, legend=colnames(ex2))
dev.off()
dex <- read.table(dex_counts_all.txt, sep = "\t", header = T, row.names = 1)
dex <- as.matrix(dex)
gene <- select(dex, 1:6)
dex <- read.table("dex_counts_all.txt", sep = "\t", header = T, row.names = 1)
dex <- read.table("dex_counts_all.txt", sep = "\t", header = T)
dex <- as.matrix(dex)
gene <- select(dex, 1:6)
dex <- read.table("dex_counts_all.txt", sep = "\t", header = T)
gene <- select(dex, 1:6)
head(gene)
count <- select(dex, -1:6)
count <- select(dex, -1:-6)
head(count)
design <- model.matrix(~ condition + type)
d <- DGEList(counts = count, genes = gene, group = condition)
d
keep <- filterByExpr(d, design)
d <- d[keep,,keep.lib.sizes = F]
d <- calcNormFactors(d)
cpm <- cpm(d, log = T)
color <- c("red", "orange", "gold", "green", "seagreen", "cyan", "blue", "purple")[type]
marker <- c(1, 2, 3, 4, 5, 6, 15, 16, 17)[condition]
plotMDS(cpm, col=color, pch=marker)
designb <- model.matrix(~ condition)
logcpm_nob <- removeBatchEffect(logcpm, batch=type, design=designb)
designb <- model.matrix(~ condition)
logcpm_nob <- removeBatchEffect(cpm, batch=type, design=designb)
plotMDS(logcpm_nob, col=color, pch=marker)
color <- c("red", "darkorange", "gold", "green", "seagreen", "cyan", "blue", "purple")[type]
marker <- c(1, 2, 3, 4, 5, 6, 15, 16, 17)[condition]
pdf("MDS_exoncount.pdf")
dev.off()
pdf("MDS_exoncount.pdf")
plotMDS(cpm, col=color, pch=marker)
legend("top",fill=c("red", "darkorange", "gold", "green", "seagreen", "cyan", "blue", "purple"), legend=levels(type))
legend("topright",pch = c(1, 2, 3, 4, 5, 6, 15, 19, 17),legend=levels(condition))
dev.off()
pdf("MDS_exoncount.pdf")
plotMDS(cpm, col=color, pch=marker)
legend("bottom",fill=c("red", "darkorange", "gold", "green", "seagreen", "cyan", "blue", "purple"), legend=levels(type))
legend("bottomright",pch = c(1, 2, 3, 4, 5, 6, 15, 19, 17),legend=levels(condition))
dev.off()
pdf("MDS_exoncount_nobatch.pdf")
plotMDS(logcpm_nob, col=color, pch=marker)
legend("bottom",fill=c("red", "darkorange", "gold", "green", "seagreen", "cyan", "blue", "purple"), legend=levels(type))
legend("bottomright",pch = c(1, 2, 3, 4, 5, 6, 15, 19, 17),legend=levels(condition))
dev.off()
plotMDS(logcpm_nob, col=color, pch=marker)
pdf("MDS_exoncount_nobatch.pdf")
plotMDS(logcpm_nob, col=color, pch=marker)
legend("top",fill=c("red", "darkorange", "gold", "green", "seagreen", "cyan", "blue", "purple"), legend=levels(type))
legend("topright",pch = c(1, 2, 3, 4, 5, 6, 15, 19, 17),legend=levels(condition))
dev.off()
q()
library(edgeR)
q()
library(edgeR)
count <- read.table("dex_counts_Cai.txt", sep = "\t", header = T, row.names = 1)
count <- read.table("dex_counts_Cai.txt", sep = "\t", header = T, row.names = 1, skip =1)
count <- read.table("dex_counts_Cai.txt", sep = "\t", header = T, row.names = 2, skip =1)
count <- read.table("dex_counts_Cai.txt", sep = "\t", header = T, skip =1)
head(count)
count <- as.matrix(count)
colnames(count) = c("CaiCol0.1", "CaiCol0.2", "CaiCol0.3", "Caifio1.1", "Caifio1.2", "Caifio1.3")
group = factor(c("col0", "col0", "col0", "fio1", "fio1", "fio1"))
colnames(count[7:12]) = c("CaiCol0.1", "CaiCol0.2", "CaiCol0.3", "Caifio1.1", "Caifio1.2", "Caifio1.3")
group = factor(c("col0", "col0", "col0", "fio1", "fio1", "fio1"))
head(count[,7:12])
head(count[[7:12]])
head(count[7:12])
colnames(count[,7:12]) = c("CaiCol0.1", "CaiCol0.2", "CaiCol0.3", "Caifio1.1", "Caifio1.2", "Caifio1.3")
group = factor(c("col0", "col0", "col0", "fio1", "fio1", "fio1"))
head(count)
count <- as.matrix(count)
head(count)
count <- read.table("dex_counts_Cai.txt", sep = "\t", header = T, skip =1)
count <- as.matrix(count)
count
q()
library(edgeR)
count <- read.table("dex_counts_Cai.txt", sep = "\t", header = T, skip =1)
head(count)
counts <- as.matrix(count[,7:12])
head(counts)
colnames(counts) = c("CaiCol0.1", "CaiCol0.2", "CaiCol0.3", "Caifio1.1", "Caifio1.2", "Caifio1.3")
head(counts)
genes <- count[,1:6]
head(genes)
y <- DGEList(counts=counts, genes=genes)
head(y)
keep <- filterByExpr(y, group=group)
group = factor(c("col0", "col0", "col0", "fio1", "fio1", "fio1"))
keep <- filterByExpr(y, group=group)
table(keep)
y <- y[keep, , keep.lib.sizes=False]
y <- y[keep, , keep.lib.sizes=FALSE]
y <- normLibSizes(y)
y$samples
plotMDS(y, col=c(1:4)[group])
 design <- model.matrix(~ 0 + group)
design
y <- estimateDisp(y, design, robust=TRUE)
plotBCV(y)
fit <- glmQLFit(y, design, robust=TRUE)
plotQLDisp(fit)
4
y$samples
y <- DGEList(counts=counts, genes=genes)
y
group
y$samples$group <- group
 keep <- filterByExpr(y, group=group)
 y <- normLibSizes(y)
y$samples
design <- model.matrix(~ 0 + group)
 y <- estimateDisp(y, design, robust=TRUE)
plotBCV(y)
fit <- glmQLFit(y, design, robust=TRUE)
plotQLDisp(fit)
design
contr <- makeContrast(col0 - fio1, levels=design)
contr <- makeContrasts(col0 - fio1, levels=design)
contr <- makeContrasts(groupcol0 - groupfio1, levels=design)
qlf <- glmQLFTest(fit, contrast=contr)
topTags(qlf)
q()
library(edgeR)
count <- read.table("dex_counts_Cai.txt", sep = "\t", header = T, skip =1)
counts <- as.matrix(count[,7:12])
colnames(counts) = c("CaiCol0.1", "CaiCol0.2", "CaiCol0.3", "Caifio1.1", "Caifio1.2", "Caifio1.3")
genes <- count[,1:6]
y <- DGEList(counts=counts, genes=genes)
group = factor(c("col0", "col0", "col0", "fio1", "fio1", "fio1"))
y$samples$group <- group
y
keep <- filterByExpr(y, group=group)
y <- y[keep, , keep.lib.sizes=FALSE]
y <- normLibSizes(y)
design <- model.matrix(~ 0 + group)
y <- estimateDisp(y, design, robust=TRUE)
plotBCV(y)
fit <- glmQLFit(y, design, robust=TRUE)
plotQLDisp(fit)
contr <- makeContrasts(groupfio1 - groupcol0, levels=design)
qlf <- glmQLFTest(fit, contrast=contr)
topTags(qlf)
table <- as.data.frame(topTags(qlf, n = nrow(counts)))
write.table(table, "edgeR_result_splicing_Cai.txt", col.names = T, sep = "\t")
write.table(table, "edgeR_result_splicing_Cai.txt", col.names = T, row.names = F, sep = "\t")
 is.de <- decideTests(qlf, p.value=0.05)
sp <- diffSpliceDGE(fit, contrast=contr, geneid="GeneID", exonid="Start")
fit <- glmQLFit(y, design, robust=TRUE)
 sp <- diffSpliceDGE(fit, contrast=contr, geneid="GeneID", exonid="Start")
 sp <- diffSpliceDGE(fit, contrast=contr, geneid="Geneid", exonid="Start")
> topSpliceDGE(sp, test="exon")
 topSpliceDGE(sp, test="exon")
par(mfrow=c(1,2))
plotSpliceDGE(sp, geneid="17362891", genecol="Start")
plotSpliceDGE(sp, geneid=17362891, genecol="Start")
plotSpliceDGE(sp, geneid="AT2G41640+AT2G41650", genecol="Geneid)
"
)
plotSpliceDGE(sp, geneid="AT2G41640+AT2G41650", genecol="Geneid")
table <- as.data.frame(topSpliceDGE(sp, test="exon", n=nrow(sp)))
write.table(sp, "edgeR_result_splicing_Cai.txt", col.names = T, row.names = F, sep = "\t")
write.table(table, "edgeR_result_splicing_Cai.txt", col.names = T, row.names = F, sep = "\t")
sp
table <- as.data.frame(topSpliceDGE(sp, test="exon", n=nrow(sp$genes)))
write.table(table, "edgeR_result_splicing_Cai.txt", col.names = T, row.names = F, sep = "\t")
q()
for (i in 1:6) {
for (j in 1:6) {
if (i >= j) {
	next
}
for (i in 1:6) {
for (j in 1:6) {
if (i >= j) {
        next
}
missing <- c(missing, setdiff(i:j, i:6))
}
}
print(missing)
for (i in 1:6) {
for (j in 1:6) {
if (i >= j) {
        next
}
missing <- c(missing,setdiff(i:6,j))
}
}
print(missing)
i <- 1
j <- 3
ij <- c(i, j)
print(ij)
sample4 <- setdiff(c(1:6), ij)
print(sample4)
print(sample4[1])
print(sample4[0])
q
q()
q()
